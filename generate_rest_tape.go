//go:build ignore
// +build ignore

package main

import (
	"io/ioutil"
	"reflect"
	"strings"

	"github.com/Postcord/rest"
)

const start = `// Code generated by generate_rest_tape.go; DO NOT EDIT.

package router

//go:generate go run generate_rest_tape.go

import (
	"image"

	"github.com/Postcord/objects"
	"github.com/Postcord/rest"
)

type restTape struct {
	tape *tape
	rest rest.RESTClient
}

`

func strbool(b bool) string {
	if b {
		return "true"
	}
	return "false"
}

func generateRestFunctions() string {
	letters := []string{"", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j"}
	t := reflect.TypeOf((*rest.Client)(nil))
	methodNum := t.NumMethod()
	funcs := make([]string, methodNum)
	for i := 0; i < methodNum; i++ {
		method := t.Method(i)
		f := "func (r restTape) " + method.Name + "("
		params := ""
		inNum := method.Type.NumIn()
		for j := 1; j < inNum; j++ {
			if j > 1 {
				f += ", "
				params += ", "
			}
			fVard := ""
			inStr := method.Type.In(j).String()
			vard := method.Type.IsVariadic() && j == inNum-1
			if vard {
				fVard = "..."
				inStr = inStr[2:]
			}
			f += letters[j] + " " + fVard + inStr
			params += letters[j]
			if vard {
				params += "..."
			}
		}
		tapeParams := params
		if strings.HasSuffix(params, "...") {
			tapeParams = params[:len(params)-3]
		}
		f += ")"
		numOut := method.Type.NumOut()
		startCallSep := ", "
		if inNum == 1 {
			startCallSep = ""
		}
		outCall := "x := "
		inCall := "x"
		switch numOut {
		case 0:
			startCallSep = ""
			outCall = ""
		case 1:
			f += " " + method.Type.Out(0).String()
		default:
			f += " ("
			retOutputs := make([]string, numOut)
			for j := 0; j < numOut; j++ {
				if j > 0 {
					f += ", "
				}
				f += method.Type.Out(j).String()
				retOutputs[j] = letters[j+inNum]
			}
			inCall = strings.Join(retOutputs, ", ")
			outCall = inCall + " := "
			f += ")"
		}
		retCall := ""
		if inCall != "" {
			retCall = "return " + inCall
		}
		f += ` {
	result := r.tape.write("` + method.Name + `", ` + strbool(method.Type.IsVariadic()) + startCallSep + tapeParams + `)
	` + outCall + "r.rest." + method.Name + `(` + params + `)
	result.end(` + inCall + `)
	` + retCall + `
}`
		funcs[i] = f
	}
	return start + strings.Join(funcs, "\n\n") + "\n"
}

func main() {
	if err := ioutil.WriteFile("rest_tape_gen.go", []byte(generateRestFunctions()), 0666); err != nil {
		panic(err)
	}
}
