// Code generated by generate_rest_tape_player.go; DO NOT EDIT.

package router

//go:generate go run generate_rest_tape_player.go

import (
	"image"

	"github.com/Postcord/objects"
	"github.com/Postcord/rest"
)

type restTapePlayer struct {
	t TestingT

	tape  tape
	index int
}

func (r *restTapePlayer) AddGuildCommand(a objects.Snowflake, b objects.Snowflake, c *objects.ApplicationCommand) (d *objects.ApplicationCommand, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected AddGuildCommand at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "AddGuildCommand", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) AddGuildMember(a objects.Snowflake, b objects.Snowflake, c *rest.AddGuildMemberParams) (d *objects.GuildMember, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected AddGuildMember at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "AddGuildMember", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) AddGuildMemberRole(a objects.Snowflake, b objects.Snowflake, c objects.Snowflake, d string) (e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected AddGuildMemberRole at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "AddGuildMemberRole", false, 4, a, b, c, d, &e)
	return
}

func (r *restTapePlayer) AddPinnedMessage(a objects.Snowflake, b objects.Snowflake) (c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected AddPinnedMessage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "AddPinnedMessage", false, 2, a, b, &c)
	return
}

func (r *restTapePlayer) AddThreadMember(a objects.Snowflake, b objects.Snowflake) (c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected AddThreadMember at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "AddThreadMember", false, 2, a, b, &c)
	return
}

func (r *restTapePlayer) BatchEditApplicationCommandPermissions(a objects.Snowflake, b objects.Snowflake, c []*objects.GuildApplicationCommandPermissions) (d []*objects.GuildApplicationCommandPermissions, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected BatchEditApplicationCommandPermissions at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "BatchEditApplicationCommandPermissions", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) BeginGuildPrune(a objects.Snowflake, b *rest.BeginGuildPruneParams) (c int, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected BeginGuildPrune at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "BeginGuildPrune", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) BulkDeleteMessages(a objects.Snowflake, b *rest.DeleteMessagesParams) (c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected BulkDeleteMessages at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "BulkDeleteMessages", false, 2, a, b, &c)
	return
}

func (r *restTapePlayer) BulkOverwriteGlobalCommands(a objects.Snowflake, b []*objects.ApplicationCommand) (c []*objects.ApplicationCommand, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected BulkOverwriteGlobalCommands at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "BulkOverwriteGlobalCommands", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) BulkOverwriteGuildCommands(a objects.Snowflake, b objects.Snowflake, c []*objects.ApplicationCommand) (d []*objects.ApplicationCommand, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected BulkOverwriteGuildCommands at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "BulkOverwriteGuildCommands", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) CreateBan(a objects.Snowflake, b objects.Snowflake, c *rest.CreateGuildBanParams) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateBan at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateBan", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) CreateChannelInvite(a objects.Snowflake, b *rest.CreateInviteParams) (c *objects.Invite, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateChannelInvite at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateChannelInvite", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) CreateCommand(a objects.Snowflake, b *objects.ApplicationCommand) (c *objects.ApplicationCommand, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateCommand at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateCommand", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) CreateDM(a *rest.CreateDMParams) (b *objects.Channel, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateDM at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateDM", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) CreateFollowupMessage(a objects.Snowflake, b string, c *rest.CreateFollowupMessageParams) (d *objects.Message, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateFollowupMessage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateFollowupMessage", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) CreateGroupDM(a *rest.CreateGroupDMParams) (b *objects.Channel, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateGroupDM at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateGroupDM", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) CreateGuild(a *rest.CreateGuildParams) (b *objects.Guild, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateGuild at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateGuild", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) CreateGuildChannel(a objects.Snowflake, b *rest.ChannelCreateParams) (c *objects.Channel, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateGuildChannel at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateGuildChannel", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) CreateGuildFromTemplate(a string, b string) (c *objects.Guild, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateGuildFromTemplate at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateGuildFromTemplate", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) CreateGuildRole(a objects.Snowflake, b *rest.CreateGuildRoleParams) (c *objects.Role, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateGuildRole at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateGuildRole", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) CreateGuildTemplate(a objects.Snowflake, b *rest.CreateGuildTemplateParams) (c *objects.Template, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateGuildTemplate at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateGuildTemplate", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) CreateInteractionResponse(a objects.Snowflake, b string, c *objects.InteractionResponse) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateInteractionResponse at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateInteractionResponse", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) CreateMessage(a objects.Snowflake, b *rest.CreateMessageParams) (c *objects.Message, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateMessage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateMessage", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) CreateReaction(a objects.Snowflake, b objects.Snowflake, c interface {}) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateReaction at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateReaction", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) CreateWebhook(a objects.Snowflake, b *rest.CreateWebhookParams) (c *objects.Webhook, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CreateWebhook at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CreateWebhook", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) CrossPostMessage(a objects.Snowflake, b objects.Snowflake) (c *objects.Message, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected CrossPostMessage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "CrossPostMessage", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) DeleteAllReactions(a objects.Snowflake, b objects.Snowflake) (c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteAllReactions at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteAllReactions", false, 2, a, b, &c)
	return
}

func (r *restTapePlayer) DeleteChannel(a objects.Snowflake, b string) (c *objects.Channel, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteChannel at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteChannel", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) DeleteChannelPermission(a objects.Snowflake, b objects.Snowflake, c string) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteChannelPermission at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteChannelPermission", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) DeleteCommand(a objects.Snowflake, b objects.Snowflake) (c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteCommand at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteCommand", false, 2, a, b, &c)
	return
}

func (r *restTapePlayer) DeleteEmojiReactions(a objects.Snowflake, b objects.Snowflake, c interface {}) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteEmojiReactions at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteEmojiReactions", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) DeleteFollowupMessage(a objects.Snowflake, b string, c objects.Snowflake) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteFollowupMessage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteFollowupMessage", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) DeleteGuild(a objects.Snowflake) (b error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteGuild at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteGuild", false, 1, a, &b)
	return
}

func (r *restTapePlayer) DeleteGuildCommand(a objects.Snowflake, b objects.Snowflake, c objects.Snowflake) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteGuildCommand at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteGuildCommand", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) DeleteGuildIntegration(a objects.Snowflake, b objects.Snowflake, c string) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteGuildIntegration at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteGuildIntegration", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) DeleteGuildRole(a objects.Snowflake, b objects.Snowflake, c string) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteGuildRole at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteGuildRole", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) DeleteGuildTemplate(a objects.Snowflake, b string, c string) (d *objects.Template, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteGuildTemplate at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteGuildTemplate", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) DeleteInvite(a string, b string) (c *objects.Invite, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteInvite at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteInvite", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) DeleteMessage(a objects.Snowflake, b objects.Snowflake) (c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteMessage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteMessage", false, 2, a, b, &c)
	return
}

func (r *restTapePlayer) DeleteOriginalInteractionResponse(a objects.Snowflake, b string) (c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteOriginalInteractionResponse at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteOriginalInteractionResponse", false, 2, a, b, &c)
	return
}

func (r *restTapePlayer) DeleteOwnReaction(a objects.Snowflake, b objects.Snowflake, c interface {}) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteOwnReaction at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteOwnReaction", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) DeletePinnedMessage(a objects.Snowflake, b objects.Snowflake) (c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeletePinnedMessage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeletePinnedMessage", false, 2, a, b, &c)
	return
}

func (r *restTapePlayer) DeleteUserReaction(a objects.Snowflake, b objects.Snowflake, c objects.Snowflake, d interface {}) (e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteUserReaction at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteUserReaction", false, 4, a, b, c, d, &e)
	return
}

func (r *restTapePlayer) DeleteWebhook(a objects.Snowflake) (b error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteWebhook at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteWebhook", false, 1, a, &b)
	return
}

func (r *restTapePlayer) DeleteWebhookMessage(a objects.Snowflake, b objects.Snowflake, c string) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteWebhookMessage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteWebhookMessage", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) DeleteWebhookWithToken(a objects.Snowflake, b string) (c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected DeleteWebhookWithToken at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "DeleteWebhookWithToken", false, 2, a, b, &c)
	return
}

func (r *restTapePlayer) EditApplicationCommandPermissions(a objects.Snowflake, b objects.Snowflake, c objects.Snowflake, d []*objects.ApplicationCommandPermissions) (e *objects.GuildApplicationCommandPermissions, f error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected EditApplicationCommandPermissions at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "EditApplicationCommandPermissions", false, 4, a, b, c, d, &e, &f)
	return
}

func (r *restTapePlayer) EditChannelPermissions(a objects.Snowflake, b objects.Snowflake, c *rest.EditChannelParams) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected EditChannelPermissions at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "EditChannelPermissions", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) EditFollowupMessage(a objects.Snowflake, b string, c objects.Snowflake, d *rest.EditWebhookMessageParams) (e *objects.Message, f error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected EditFollowupMessage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "EditFollowupMessage", false, 4, a, b, c, d, &e, &f)
	return
}

func (r *restTapePlayer) EditMessage(a objects.Snowflake, b objects.Snowflake, c *rest.EditMessageParams) (d *objects.Message, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected EditMessage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "EditMessage", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) EditOriginalInteractionResponse(a objects.Snowflake, b string, c *rest.EditWebhookMessageParams) (d *objects.Message, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected EditOriginalInteractionResponse at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "EditOriginalInteractionResponse", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) EditWebhookMessage(a objects.Snowflake, b objects.Snowflake, c string, d *rest.EditWebhookMessageParams) (e *objects.Message, f error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected EditWebhookMessage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "EditWebhookMessage", false, 4, a, b, c, d, &e, &f)
	return
}

func (r *restTapePlayer) ExecuteWebhook(a objects.Snowflake, b string, c *rest.ExecuteWebhookParams) (d *objects.Message, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ExecuteWebhook at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ExecuteWebhook", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) FollowNewsChannel(a objects.Snowflake) (b *objects.FollowedChannel, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected FollowNewsChannel at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "FollowNewsChannel", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) Gateway() (a *objects.Gateway, b error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected Gateway at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "Gateway", false, 0, &a, &b)
	return
}

func (r *restTapePlayer) GatewayBot() (a *objects.Gateway, b error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GatewayBot at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GatewayBot", false, 0, &a, &b)
	return
}

func (r *restTapePlayer) GetApplicationCommandPermissions(a objects.Snowflake, b objects.Snowflake, c objects.Snowflake) (d *objects.GuildApplicationCommandPermissions, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetApplicationCommandPermissions at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetApplicationCommandPermissions", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) GetAuditLogs(a objects.Snowflake, b *rest.GetAuditLogParams) (c *objects.AuditLog, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetAuditLogs at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetAuditLogs", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) GetChannel(a objects.Snowflake) (b *objects.Channel, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetChannel at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetChannel", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetChannelInvites(a objects.Snowflake) (b []*objects.Invite, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetChannelInvites at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetChannelInvites", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetChannelMessage(a objects.Snowflake, b objects.Snowflake) (c *objects.Message, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetChannelMessage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetChannelMessage", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) GetChannelMessages(a objects.Snowflake, b *rest.GetChannelMessagesParams) (c []*objects.Message, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetChannelMessages at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetChannelMessages", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) GetChannelWebhooks(a objects.Snowflake) (b []*objects.Webhook, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetChannelWebhooks at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetChannelWebhooks", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetCommand(a objects.Snowflake, b objects.Snowflake) (c *objects.ApplicationCommand, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetCommand at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetCommand", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) GetCommands(a objects.Snowflake) (b []*objects.ApplicationCommand, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetCommands at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetCommands", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetCurrentUser() (a *objects.User, b error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetCurrentUser at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetCurrentUser", false, 0, &a, &b)
	return
}

func (r *restTapePlayer) GetCurrentUserGuilds(a *rest.CurrentUserGuildsParams) (b []*objects.Guild, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetCurrentUserGuilds at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetCurrentUserGuilds", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetFollowupMessage(a objects.Snowflake, b string, c objects.Snowflake) (d *objects.Message, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetFollowupMessage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetFollowupMessage", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) GetGuild(a objects.Snowflake) (b *objects.Guild, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuild at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuild", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetGuildApplicationCommandPermissions(a objects.Snowflake, b objects.Snowflake) (c []*objects.GuildApplicationCommandPermissions, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildApplicationCommandPermissions at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildApplicationCommandPermissions", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) GetGuildBan(a objects.Snowflake, b objects.Snowflake) (c *objects.Ban, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildBan at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildBan", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) GetGuildBans(a objects.Snowflake) (b []*objects.Ban, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildBans at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildBans", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetGuildChannels(a objects.Snowflake) (b []*objects.Channel, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildChannels at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildChannels", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetGuildCommand(a objects.Snowflake, b objects.Snowflake, c objects.Snowflake) (d *objects.ApplicationCommand, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildCommand at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildCommand", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) GetGuildCommands(a objects.Snowflake, b objects.Snowflake) (c []*objects.ApplicationCommand, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildCommands at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildCommands", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) GetGuildIntegrations(a objects.Snowflake) (b []*objects.Integration, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildIntegrations at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildIntegrations", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetGuildInvites(a objects.Snowflake) (b []*objects.Invite, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildInvites at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildInvites", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetGuildMember(a objects.Snowflake, b objects.Snowflake) (c *objects.GuildMember, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildMember at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildMember", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) GetGuildPreview(a objects.Snowflake) (b *objects.GuildPreview, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildPreview at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildPreview", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetGuildPruneCount(a objects.Snowflake, b *rest.GetGuildPruneCountParams) (c int, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildPruneCount at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildPruneCount", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) GetGuildRoles(a objects.Snowflake) (b []*objects.Role, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildRoles at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildRoles", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetGuildTemplates(a objects.Snowflake) (b []*objects.Template, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildTemplates at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildTemplates", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetGuildVanityURL(a objects.Snowflake) (b *objects.Invite, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildVanityURL at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildVanityURL", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetGuildVoiceRegions(a objects.Snowflake) (b []*objects.VoiceRegion, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildVoiceRegions at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildVoiceRegions", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetGuildWebhooks(a objects.Snowflake) (b []*objects.Webhook, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildWebhooks at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildWebhooks", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetGuildWelcomeScreen(a objects.Snowflake) (b *objects.MembershipScreening, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildWelcomeScreen at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildWelcomeScreen", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetGuildWidget(a objects.Snowflake) (b *objects.GuildWidgetJSON, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildWidget at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildWidget", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetGuildWidgetImage(a objects.Snowflake, b *rest.GuildWidgetImageParams) (c image.Image, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildWidgetImage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildWidgetImage", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) GetGuildWidgetSettings(a objects.Snowflake) (b *objects.GuildWidget, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetGuildWidgetSettings at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetGuildWidgetSettings", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetInvite(a string, b *rest.GetInviteParams) (c *objects.Invite, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetInvite at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetInvite", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) GetOriginalInteractionResponse(a objects.Snowflake, b string) (c *objects.Message, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetOriginalInteractionResponse at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetOriginalInteractionResponse", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) GetPinnedMessages(a objects.Snowflake) (b []*objects.Message, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetPinnedMessages at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetPinnedMessages", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetReactions(a objects.Snowflake, b objects.Snowflake, c interface {}, d *rest.GetReactionsParams) (e []*objects.User, f error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetReactions at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetReactions", false, 4, a, b, c, d, &e, &f)
	return
}

func (r *restTapePlayer) GetTemplate(a string) (b *objects.Template, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetTemplate at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetTemplate", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetUser(a objects.Snowflake) (b *objects.User, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetUser at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetUser", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetUserConnections() (a []*objects.Connection, b error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetUserConnections at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetUserConnections", false, 0, &a, &b)
	return
}

func (r *restTapePlayer) GetVoiceRegions() (a []*objects.VoiceRegion, b error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetVoiceRegions at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetVoiceRegions", false, 0, &a, &b)
	return
}

func (r *restTapePlayer) GetWebhook(a objects.Snowflake) (b *objects.Webhook, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetWebhook at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetWebhook", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) GetWebhookWithToken(a objects.Snowflake, b string) (c *objects.Webhook, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected GetWebhookWithToken at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "GetWebhookWithToken", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) JoinThread(a objects.Snowflake) (b error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected JoinThread at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "JoinThread", false, 1, a, &b)
	return
}

func (r *restTapePlayer) LeaveGuild(a objects.Snowflake) (b error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected LeaveGuild at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "LeaveGuild", false, 1, a, &b)
	return
}

func (r *restTapePlayer) LeaveThread(a objects.Snowflake) (b error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected LeaveThread at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "LeaveThread", false, 1, a, &b)
	return
}

func (r *restTapePlayer) ListActiveThreads(a objects.Snowflake) (b []*rest.ListThreadsResponse, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ListActiveThreads at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ListActiveThreads", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) ListGuildMembers(a objects.Snowflake, b *rest.ListGuildMembersParams) (c []*objects.GuildMember, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ListGuildMembers at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ListGuildMembers", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) ListJoinedPrivateArchivedThreads(a objects.Snowflake, b ...*rest.ListThreadsParams) (c *rest.ListThreadsResponse, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ListJoinedPrivateArchivedThreads at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ListJoinedPrivateArchivedThreads", true, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) ListPrivateArchivedThreads(a objects.Snowflake, b ...*rest.ListThreadsParams) (c *rest.ListThreadsResponse, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ListPrivateArchivedThreads at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ListPrivateArchivedThreads", true, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) ListPublicArchivedThreads(a objects.Snowflake, b ...*rest.ListThreadsParams) (c *rest.ListThreadsResponse, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ListPublicArchivedThreads at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ListPublicArchivedThreads", true, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) ListThreadMembers(a objects.Snowflake) (b []*objects.ThreadMember, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ListThreadMembers at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ListThreadMembers", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) ModifyChannel(a objects.Snowflake, b *rest.ModifyChannelParams) (c *objects.Channel, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ModifyChannel at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ModifyChannel", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) ModifyCurrentUser(a *rest.ModifyCurrentUserParams) (b *objects.User, c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ModifyCurrentUser at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ModifyCurrentUser", false, 1, a, &b, &c)
	return
}

func (r *restTapePlayer) ModifyCurrentUserNick(a objects.Snowflake, b *rest.ModifyCurrentUserNickParams) (c *rest.ModifyCurrentUserNickParams, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ModifyCurrentUserNick at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ModifyCurrentUserNick", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) ModifyGuild(a objects.Snowflake, b *rest.ModifyGuildParams) (c *objects.Guild, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ModifyGuild at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ModifyGuild", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) ModifyGuildChannelPositions(a objects.Snowflake, b []*rest.ModifyChannelPositionParams, c string) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ModifyGuildChannelPositions at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ModifyGuildChannelPositions", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) ModifyGuildMember(a objects.Snowflake, b objects.Snowflake, c *rest.ModifyGuildMemberParams) (d *objects.GuildMember, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ModifyGuildMember at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ModifyGuildMember", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) ModifyGuildRole(a objects.Snowflake, b objects.Snowflake, c *rest.ModifyGuildRoleParams) (d *objects.Role, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ModifyGuildRole at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ModifyGuildRole", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) ModifyGuildRolePositions(a objects.Snowflake, b []*rest.ModifyGuildRolePositionsParams) (c []*objects.Role, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ModifyGuildRolePositions at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ModifyGuildRolePositions", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) ModifyGuildTemplate(a objects.Snowflake, b string, c *rest.ModifyGuildTemplateParams) (d *objects.Template, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ModifyGuildTemplate at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ModifyGuildTemplate", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) ModifyGuildWelcomeScreen(a objects.Snowflake, b *rest.ModifyGuildMembershipScreeningParams) (c *objects.MembershipScreening, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ModifyGuildWelcomeScreen at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ModifyGuildWelcomeScreen", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) ModifyGuildWidget(a objects.Snowflake, b *rest.GuildWidgetParams) (c *objects.GuildWidget, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ModifyGuildWidget at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ModifyGuildWidget", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) ModifyWebhook(a objects.Snowflake, b *rest.ModifyWebhookParams) (c *objects.Webhook, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ModifyWebhook at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ModifyWebhook", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) ModifyWebhookWithToken(a objects.Snowflake, b string, c *rest.ModifyWebhookWithTokenParams) (d *objects.Webhook, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ModifyWebhookWithToken at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "ModifyWebhookWithToken", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) RemoveGuildBan(a objects.Snowflake, b objects.Snowflake, c string) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected RemoveGuildBan at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "RemoveGuildBan", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) RemoveGuildMember(a objects.Snowflake, b objects.Snowflake, c string) (d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected RemoveGuildMember at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "RemoveGuildMember", false, 3, a, b, c, &d)
	return
}

func (r *restTapePlayer) RemoveGuildMemberRole(a objects.Snowflake, b objects.Snowflake, c objects.Snowflake, d string) (e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected RemoveGuildMemberRole at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "RemoveGuildMemberRole", false, 4, a, b, c, d, &e)
	return
}

func (r *restTapePlayer) RemoveThreadMember(a objects.Snowflake, b objects.Snowflake) (c error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected RemoveThreadMember at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "RemoveThreadMember", false, 2, a, b, &c)
	return
}

func (r *restTapePlayer) StartThread(a objects.Snowflake, b *rest.StartThreadParams) (c *objects.Channel, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected StartThread at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "StartThread", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) StartThreadWithMessage(a objects.Snowflake, b objects.Snowflake, c *rest.StartThreadParams) (d *objects.Channel, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected StartThreadWithMessage at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "StartThreadWithMessage", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) StartTyping(a objects.Snowflake) (b error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected StartTyping at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "StartTyping", false, 1, a, &b)
	return
}

func (r *restTapePlayer) SyncGuildTemplate(a objects.Snowflake, b string) (c *objects.Template, d error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected SyncGuildTemplate at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "SyncGuildTemplate", false, 2, a, b, &c, &d)
	return
}

func (r *restTapePlayer) UpdateCommand(a objects.Snowflake, b objects.Snowflake, c *objects.ApplicationCommand) (d *objects.ApplicationCommand, e error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected UpdateCommand at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "UpdateCommand", false, 3, a, b, c, &d, &e)
	return
}

func (r *restTapePlayer) UpdateGuildCommand(a objects.Snowflake, b objects.Snowflake, c objects.Snowflake, d *objects.ApplicationCommand) (e *objects.ApplicationCommand, f error) {
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected UpdateGuildCommand at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "UpdateGuildCommand", false, 4, a, b, c, d, &e, &f)
	return
}
