//go:build ignore
// +build ignore

package main

import (
	"io/ioutil"
	"reflect"
	"strconv"
	"strings"

	"github.com/Postcord/rest"
)

const start = `// Code generated by generate_rest_tape_player.go; DO NOT EDIT.

package router

//go:generate go run generate_rest_tape_player.go

import (
	"context"
	"image"

	"github.com/Postcord/objects"
	"github.com/Postcord/rest"
)

type restTapePlayer struct {
	t TestingT

	tape  tape
	index int
}

`

func strbool(b bool) string {
	if b {
		return "true"
	}
	return "false"
}

func generateRestFunctions() string {
	letters := []string{"", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j"}
	t := reflect.TypeOf((*rest.Client)(nil))
	methodNum := t.NumMethod()
	funcs := make([]string, methodNum)
	for i := 0; i < methodNum; i++ {
		method := t.Method(i)
		f := "func (r *restTapePlayer) " + method.Name + "("

		// Handle inputs within the signature
		inParams := ""
		numIn := method.Type.NumIn()
		for j := 1; j < numIn; j++ {
			if j > 1 {
				f += ", "
				inParams += ", "
			}
			l := letters[j]
			potentialVard := method.Type.In(j).String()
			if method.Type.IsVariadic() && j == numIn-1 {
				potentialVard = "..." + method.Type.In(j).Elem().String()
			}
			f += l + " " + potentialVard
			inParams += l
		}
		f += ") "

		// Handle outputs within the signature
		outParams := ""
		numOut := method.Type.NumOut()
		if numOut != 0 {
			f += "("
		}
		for j := 0; j < numOut; j++ {
			if j != 0 || numIn != 1 {
				outParams += ", "
			}
			if j > 0 {
				f += ", "
			}
			l := letters[j+numIn]
			f += l + " " + method.Type.Out(j).String()
			outParams += "&" + l
		}
		if numOut != 0 {
			f += ") "
		}
		f += `{
	if r.index == len(r.tape) {
		r.t.Fatal("unexpected ` + method.Name + ` at end of tape")
		return // Here for unit tests - in production this will never be hit.
	}
	action := r.tape[r.index]
	r.index++
	action.match(r.t, "` + method.Name + `", ` + strbool(method.Type.IsVariadic()) + `, ` + strconv.Itoa(numIn-1) + ", " + inParams + outParams + `)
`
		if outParams == "" {
			f += "}"
		} else {
			f += "\treturn\n}"
		}
		funcs[i] = f
	}
	return start + strings.Join(funcs, "\n\n") + "\n"
}
func main() {
	if err := ioutil.WriteFile("rest_tape_player_gen.go", []byte(generateRestFunctions()), 0666); err != nil {
		panic(err)
	}
}
