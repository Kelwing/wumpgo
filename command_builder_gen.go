// Code generated by generate_command_builder.go; DO NOT EDIT.

package router

//go:generate go run generate_command_builder.go

import "github.com/Postcord/objects"

type textCommandBuilder struct {
	*commandBuilder
}

func (c textCommandBuilder) StringOption(name, description string, required bool, choices []StringChoice) TextCommandBuilder {
	c.commandBuilder.StringOption(name, description, required, choices)
	return c
}

func (c textCommandBuilder) IntOption(name, description string, required bool, choices []IntChoice) TextCommandBuilder {
	c.commandBuilder.IntOption(name, description, required, choices)
	return c
}

func (c textCommandBuilder) BoolOption(name, description string, required, default_ bool) TextCommandBuilder {
	c.commandBuilder.BoolOption(name, description, required, default_)
	return c
}

func (c textCommandBuilder) UserOption(name, description string, required bool) TextCommandBuilder {
	c.commandBuilder.UserOption(name, description, required)
	return c
}

func (c textCommandBuilder) ChannelOption(name, description string, required bool) TextCommandBuilder {
	c.commandBuilder.ChannelOption(name, description, required)
	return c
}

func (c textCommandBuilder) RoleOption(name, description string, required bool) TextCommandBuilder {
	c.commandBuilder.RoleOption(name, description, required)
	return c
}

func (c textCommandBuilder) MentionableOption(name, description string, required bool) TextCommandBuilder {
	c.commandBuilder.MentionableOption(name, description, required)
	return c
}

func (c textCommandBuilder) DoubleOption(name, description string, required bool, choices []DoubleChoice) TextCommandBuilder {
	c.commandBuilder.DoubleOption(name, description, required, choices)
	return c
}

func (c textCommandBuilder) DefaultPermission() TextCommandBuilder {
	c.commandBuilder.DefaultPermission()
	return c
}

func (c textCommandBuilder) AllowedMentions(config *objects.AllowedMentions) TextCommandBuilder {
	c.commandBuilder.AllowedMentions(config)
	return c
}

func (c *commandBuilder) TextCommand() TextCommandBuilder {
	c.cmd.commandType = int(objects.CommandTypeChatInput)
	return textCommandBuilder{c}
}

type subcommandBuilder struct {
	*commandBuilder
}

func (c subcommandBuilder) StringOption(name, description string, required bool, choices []StringChoice) SubCommandBuilder {
	c.commandBuilder.StringOption(name, description, required, choices)
	return c
}

func (c subcommandBuilder) IntOption(name, description string, required bool, choices []IntChoice) SubCommandBuilder {
	c.commandBuilder.IntOption(name, description, required, choices)
	return c
}

func (c subcommandBuilder) BoolOption(name, description string, required, default_ bool) SubCommandBuilder {
	c.commandBuilder.BoolOption(name, description, required, default_)
	return c
}

func (c subcommandBuilder) UserOption(name, description string, required bool) SubCommandBuilder {
	c.commandBuilder.UserOption(name, description, required)
	return c
}

func (c subcommandBuilder) ChannelOption(name, description string, required bool) SubCommandBuilder {
	c.commandBuilder.ChannelOption(name, description, required)
	return c
}

func (c subcommandBuilder) RoleOption(name, description string, required bool) SubCommandBuilder {
	c.commandBuilder.RoleOption(name, description, required)
	return c
}

func (c subcommandBuilder) MentionableOption(name, description string, required bool) SubCommandBuilder {
	c.commandBuilder.MentionableOption(name, description, required)
	return c
}

func (c subcommandBuilder) DoubleOption(name, description string, required bool, choices []DoubleChoice) SubCommandBuilder {
	c.commandBuilder.DoubleOption(name, description, required, choices)
	return c
}

func (c subcommandBuilder) DefaultPermission() SubCommandBuilder {
	c.commandBuilder.DefaultPermission()
	return c
}

func (c subcommandBuilder) AllowedMentions(config *objects.AllowedMentions) SubCommandBuilder {
	c.commandBuilder.AllowedMentions(config)
	return c
}

type messageCommandBuilder struct {
	*commandBuilder
}

func (c messageCommandBuilder) DefaultPermission() MessageCommandBuilder {
	c.commandBuilder.DefaultPermission()
	return c
}

func (c messageCommandBuilder) AllowedMentions(config *objects.AllowedMentions) MessageCommandBuilder {
	c.commandBuilder.AllowedMentions(config)
	return c
}

func (c *commandBuilder) MessageCommand() MessageCommandBuilder {
	c.cmd.commandType = int(objects.CommandTypeMessage)
	return messageCommandBuilder{c}
}

type userCommandBuilder struct {
	*commandBuilder
}

func (c userCommandBuilder) DefaultPermission() UserCommandBuilder {
	c.commandBuilder.DefaultPermission()
	return c
}

func (c userCommandBuilder) AllowedMentions(config *objects.AllowedMentions) UserCommandBuilder {
	c.commandBuilder.AllowedMentions(config)
	return c
}

func (c *commandBuilder) UserCommand() UserCommandBuilder {
	c.cmd.commandType = int(objects.CommandTypeUser)
	return userCommandBuilder{c}
}

type commandOptions interface {
	// StringOption is used to define an option of the type string. Note that choices is ignored if it's nil or length 0.
	// Maps to option type 3 (STRING): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	StringOption(name, description string, required bool, choices []StringChoice) CommandBuilder

	// IntOption is used to define an option of the type int. Note that choices is ignored if it's nil or length 0.
	// Maps to option type 4 (INTEGER): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	IntOption(name, description string, required bool, choices []IntChoice) CommandBuilder

	// IntOption is used to define an option of the type bool.
	// Maps to option type 5 (BOOLEAN): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	BoolOption(name, description string, required, default_ bool) CommandBuilder

	// IntOption is used to define an option of the type user.
	// Maps to option type 6 (USER): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	UserOption(name, description string, required bool) CommandBuilder

	// ChannelOption is used to define an option of the type channel.
	// Maps to option type 7 (CHANNEL): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	ChannelOption(name, description string, required bool) CommandBuilder

	// RoleOption is used to define an option of the type role.
	// Maps to option type 8 (ROLE): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	RoleOption(name, description string, required bool) CommandBuilder

	// MentionableOption is used to define an option of the type mentionable.
	// Maps to option type 9 (MENTIONABLE): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	MentionableOption(name, description string, required bool) CommandBuilder

	// DoubleOption is used to define an option of the type double. Note that choices is ignored if it's nil or length 0.
	// Maps to option type 10 (INTEGER): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	DoubleOption(name, description string, required bool, choices []DoubleChoice) CommandBuilder
}

type subCommandOptions interface {
	// StringOption is used to define an option of the type string. Note that choices is ignored if it's nil or length 0.
	// Maps to option type 3 (STRING): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	StringOption(name, description string, required bool, choices []StringChoice) SubCommandBuilder

	// IntOption is used to define an option of the type int. Note that choices is ignored if it's nil or length 0.
	// Maps to option type 4 (INTEGER): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	IntOption(name, description string, required bool, choices []IntChoice) SubCommandBuilder

	// IntOption is used to define an option of the type bool.
	// Maps to option type 5 (BOOLEAN): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	BoolOption(name, description string, required, default_ bool) SubCommandBuilder

	// IntOption is used to define an option of the type user.
	// Maps to option type 6 (USER): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	UserOption(name, description string, required bool) SubCommandBuilder

	// ChannelOption is used to define an option of the type channel.
	// Maps to option type 7 (CHANNEL): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	ChannelOption(name, description string, required bool) SubCommandBuilder

	// RoleOption is used to define an option of the type role.
	// Maps to option type 8 (ROLE): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	RoleOption(name, description string, required bool) SubCommandBuilder

	// MentionableOption is used to define an option of the type mentionable.
	// Maps to option type 9 (MENTIONABLE): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	MentionableOption(name, description string, required bool) SubCommandBuilder

	// DoubleOption is used to define an option of the type double. Note that choices is ignored if it's nil or length 0.
	// Maps to option type 10 (INTEGER): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	DoubleOption(name, description string, required bool, choices []DoubleChoice) SubCommandBuilder
}

type textCommandOptions interface {
	// StringOption is used to define an option of the type string. Note that choices is ignored if it's nil or length 0.
	// Maps to option type 3 (STRING): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	StringOption(name, description string, required bool, choices []StringChoice) TextCommandBuilder

	// IntOption is used to define an option of the type int. Note that choices is ignored if it's nil or length 0.
	// Maps to option type 4 (INTEGER): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	IntOption(name, description string, required bool, choices []IntChoice) TextCommandBuilder

	// IntOption is used to define an option of the type bool.
	// Maps to option type 5 (BOOLEAN): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	BoolOption(name, description string, required, default_ bool) TextCommandBuilder

	// IntOption is used to define an option of the type user.
	// Maps to option type 6 (USER): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	UserOption(name, description string, required bool) TextCommandBuilder

	// ChannelOption is used to define an option of the type channel.
	// Maps to option type 7 (CHANNEL): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	ChannelOption(name, description string, required bool) TextCommandBuilder

	// RoleOption is used to define an option of the type role.
	// Maps to option type 8 (ROLE): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	RoleOption(name, description string, required bool) TextCommandBuilder

	// MentionableOption is used to define an option of the type mentionable.
	// Maps to option type 9 (MENTIONABLE): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	MentionableOption(name, description string, required bool) TextCommandBuilder

	// DoubleOption is used to define an option of the type double. Note that choices is ignored if it's nil or length 0.
	// Maps to option type 10 (INTEGER): https://discord.com/developers/docs/interactions/slash-commands#application-command-object-application-command-option-type
	DoubleOption(name, description string, required bool, choices []DoubleChoice) TextCommandBuilder
}
