package rest

import (
	"reflect"
	"regexp"
	"strings"
)

//go:generate env GENERATE=1 go test -run Test_generateInterface .

var phraseShitlist = regexp.MustCompile(`rest\.|\*rest\.Client(, )?`)

func generateInterface() string {
	t := reflect.TypeOf((*Client)(nil))
	methods := t.NumMethod()
	sigs := make([]string, methods)
	for i := 0; i < methods; i++ {
		m := t.Method(i)
		sigs[i] = "\t" + m.Name + m.Type.String()[4:]
	}
	return `// Code generated by generate_interface.go; DO NOT EDIT.

package rest

import (
	"context"
	"image"

	"github.com/Kelwing/wumpgo/objects"
)

// RESTClient is the interface that contains all functions in *rest.Client.
type RESTClient interface {
` + phraseShitlist.ReplaceAllString(strings.Join(sigs, "\n"), "") + `
}

var _ RESTClient = (*Client)(nil)
`
}
