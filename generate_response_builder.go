// +build ignore

package main

import (
	"bytes"
	"io/ioutil"
	"strings"
	"text/template"
)

const start = `// Code generated by generate_response_builder.go; DO NOT EDIT.

package router

//go:generate go run generate_response_builder.go

import "github.com/Postcord/objects"

`

const singleStructureTemplate = `// SetEmbed is used to set the embed, overwriting any previously.
func (c *{{ .Type }}) SetEmbed(embed *objects.Embed) *{{ .Type }} {
	c.editEmbed(embed, false)
	return c
}

// AddEmbed is used to append the embed, joining any previously.
func (c *{{ .Type }}) AddEmbed(embed *objects.Embed) *{{ .Type }} {
	c.editEmbed(embed, true)
	return c
}

// AddComponentRow is used to add a row of components.
func (c *{{ .Type }}) AddComponentRow(row []*objects.Component) *{{ .Type }} {
	component := &objects.Component{Type: objects.ComponentTypeActionRow, Components: row}
	response := c.ResponseData()
	response.Components = append(response.Components, component)
	return c
}

// SetComponentRows is used to set rows of components.
func (c *{{ .Type }}) SetComponentRows(rows [][]*objects.Component) *{{ .Type }} {
	components := make([]*objects.Component, len(rows))
	for i, v := range rows {
		components[i] = &objects.Component{Type: objects.ComponentTypeActionRow, Components: v}
	}
	c.ResponseData().Components = components
	return c
}

// ClearComponents is used to clear the components in a response.
func (c *{{ .Type }}) ClearComponents() *{{ .Type }} {
	c.ResponseData().Components = []*objects.Component{}
	return c
}

// SetContent is used to set the content of a response.
func (c *{{ .Type }}) SetContent(content string) *{{ .Type }} {
	c.ResponseData().Content = content
	return c
}

// SetAllowedMentions is used to set the allowed mentions of a response. This will override your global configuration.
func (c *{{ .Type }}) SetAllowedMentions(config *objects.AllowedMentions) *{{ .Type }} {
	c.ResponseData().AllowedMentions = config
	return c
}

// SetTTS is used to set the TTS configuration for your response.
func (c *{{ .Type }}) SetTTS(tts bool) *{{ .Type }} {
	c.ResponseData().TTS = tts
	return c
}

// Ephemeral is used to set the response as ephemeral.
func (c *{{ .Type }}) Ephemeral() *{{ .Type }} {
	c.ResponseData().Flags = 64
	return c
}`

var types = []string{
	"ComponentRouterCtx", "CommandRouterCtx",
}

func main() {
	file := start
	parts := make([]string, len(types))
	t, err := template.New("_").Parse(singleStructureTemplate)
	if err != nil {
		panic(err)
	}
	for i, v := range types {
		buf := &bytes.Buffer{}
		if err := t.Execute(buf, map[string]interface{}{"Type": v}); err != nil {
			panic(err)
		}
		parts[i] = buf.String()
	}
	file += strings.Join(parts, "\n\n") + "\n"
	if err := ioutil.WriteFile("response_builder_gen.go", []byte(file), 0666); err != nil {
		panic(err)
	}
}
